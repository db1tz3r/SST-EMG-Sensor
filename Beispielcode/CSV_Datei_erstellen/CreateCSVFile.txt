using System;
using System.IO;
using Waveplus.DaqSys;
using Waveplus.DaqSysInterface;
using System.Collections.Generic;
using CyUSB;

public class DataCapture
{
    private DaqSystem daqSystem;
    private StreamWriter csvWriter;
    private List<int> sensorIds;

    public DataCapture(List<int> sensorIds)
    {
        this.sensorIds = sensorIds;
        daqSystem = new DaqSystem();
        Console.WriteLine("DaqSystem initialisiert.");
    }

    public void Initialize()
    {
        USBDeviceList usbDevices = new USBDeviceList(CyConst.DEVICES_CYUSB);
        CyUSBDevice myDevice = usbDevices[0x04B4, 0x1002] as CyUSBDevice;

        if (myDevice != null)
        {
            Console.WriteLine("Gerät gefunden.");
        }
        else
        {
            Console.WriteLine("Kein Gerät gefunden.");
            throw new Exception("Gerät nicht verbunden.");
        }

        int installedSensors = daqSystem.InstalledSensors;
        foreach (int sensorId in sensorIds)
        {
            if (sensorId <= installedSensors)
            {
                daqSystem.EnableSensor(sensorId);
                Console.WriteLine($"Sensor {sensorId} aktiviert.");
            }
            else
            {
                throw new Exception($"Sensor {sensorId} ist nicht installiert.");
            }
        }

        // Datenerfassung konfigurieren
        ICaptureConfiguration captureConfig = new CaptureConfiguration
        {
            SamplingRate = SamplingRate.Hz_2000, // Beispiel: 2000 Hz
            ExternalTriggerEnabled = false
        };
        daqSystem.ConfigureCapture(captureConfig);
        Console.WriteLine("Datenerfassung konfiguriert.");
    }

    public void StartCapture()
    {
        // CSV-Datei zum Schreiben öffnen
        string filePath = "captured_data.csv";
        csvWriter = new StreamWriter(filePath);
        csvWriter.WriteLine(string.Join(" | ", sensorIds)); // Überschrift der CSV-Datei

        daqSystem.StartCapturing(DataAvailableEventPeriod.ms_100);
        Console.WriteLine("Datenerfassung gestartet.");

        // Ereignis, wenn Daten verfügbar sind
        daqSystem.DataAvailable += (sender, e) =>
        {
            int samplesCount = e.Samples.GetLength(1); // Anzahl der Messzeitpunkte

            for (int j = 0; j < samplesCount; j++) // Über alle Messzeitpunkte iterieren
            {
                List<string> sensorValues = new List<string>();

                for (int i = 0; i < sensorIds.Count; i++) // Über alle Sensoren iterieren
                {
                    sensorValues.Add(e.Samples[i, j].ToString()); // Werte sammeln
                }

                string finalOutput = string.Join(" | ", sensorValues);
                csvWriter.WriteLine(finalOutput);
            }
        };

        // Warten auf eine manuelle Eingabe, um das Capturing zu stoppen
        Console.WriteLine("Drücke 'Q' zum Beenden der Datenerfassung.");

        // Schleife zum Überprüfen, ob eine Taste gedrückt wurde
        while (true)
        {
            if (Console.In.Peek() >= 0) // Prüfen, ob eine Taste gedrückt wurde
            {
                var key = Console.ReadKey(intercept: true).Key; // Eingabe lesen
                if (key == ConsoleKey.Q)
                {
                    StopCapture();
                    break;
                }
            }
        }
    }

    public void StopCapture()
    {
        // Stoppe die Datenerfassung und schließe die CSV-Datei
        daqSystem.StopCapturing();
        csvWriter.Close();
        Console.WriteLine("Datenerfassung gestoppt und CSV-Datei geschlossen.");
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        try
        {
            // Erstelle und initialisiere das DataCapture-Objekt
            List<int> sensorIds = new List<int> {1, 2}; // Sensoren angeben
            DataCapture dataCapture = new DataCapture(sensorIds);
            dataCapture.Initialize();

            // Starte die Datenerfassung
            dataCapture.StartCapture();

            // Das Programm wartet nun, bis der Benutzer die 'Q'-Taste drückt, um die Datenerfassung zu stoppen
            Console.WriteLine("Datenerfassung abgeschlossen. CSV-Datei wurde erstellt.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fehler: " + ex.Message);
        }
    }
}
